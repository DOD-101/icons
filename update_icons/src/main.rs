use crate::code_generator::Generator;

mod code_generator;
mod icon_list;

const TOML_START_SEQ: &str = "# AUTOGENERATED";
const TOML_END_SEQ: &str = "# END AUTOGENERATED";
const TOML_PATH: &str = "../Cargo.toml";

const RUST_START_SEQ: &str = "// AUTOGENERATED";
const RUST_END_SEQ: &str = "// END AUTOGENERATED";
const RUST_BUILD_PATH: &str = "../build.rs";
const RUST_LIB_PATH: &str = "../src/lib.rs";

const HTML_START_SEQ: &str = "<!-- AUTOGENERATED";
const HTML_END_SEQ: &str = "<!-- END AUTOGENERATED";
const ICONS16: &str = "../icons16.md";
const ICONS32: &str = "../icons32.md";
const ICONS64: &str = "../icons64.md";

fn main() {
    let icon_list = icon_list::get_icons();

    let toml_generator = Generator {
        path: TOML_PATH,
        start_seq: TOML_START_SEQ,
        end_seq: TOML_END_SEQ,
    };
    toml_generator.generate_features(&icon_list, |icon_name| {
        [icon_name, " = []"].into_iter().collect::<String>()
    });

    let build_rs_generator = Generator {
        path: RUST_BUILD_PATH,
        start_seq: RUST_START_SEQ,
        end_seq: RUST_END_SEQ,
    };
    build_rs_generator.generate_features(&icon_list, |icon_name| {
        format!("#[cfg(feature = \"{icon_name}\")]\n\"{icon_name}-symbolic.svg\",")
    });

    let lib_rs_generator = Generator {
        path: RUST_LIB_PATH,
        start_seq: RUST_START_SEQ,
        end_seq: RUST_END_SEQ,
    };
    lib_rs_generator.generate_features(&icon_list, |icon_name| {
        let name = icon_name.to_uppercase().replace('-', "_");

        let alias = if icon_name == name {
            "".into()
        } else {
            format!("#[doc(alias = \"{icon_name}\")]")
        };

        format!(
            "{alias}
#[cfg_attr(docsrs, doc(cfg(feature = \"{icon_name}\")))]
#[cfg(feature = \"{icon_name}\")]
/// Icon name constant for the `{icon_name}` icon.
pub const {name}: &str = \"{icon_name}\";"
        )
    });

    let icons16_generator = Generator {
        path: ICONS16,
        start_seq: HTML_START_SEQ,
        end_seq: HTML_END_SEQ,
    };
    icons16_generator.generate_features(&icon_list, |icon_name| {
        let icon_path = format!("icons/{icon_name}-symbolic.svg");
        format!(
            "  <a href=\"{icon_path}\">
    <img src=\"{icon_path}\" width=\"16\" alt=\"{icon_name}\">
  </a>"
        )
    });

    let icons32_generator = Generator {
        path: ICONS32,
        start_seq: HTML_START_SEQ,
        end_seq: HTML_END_SEQ,
    };
    icons32_generator.generate_features(&icon_list, |icon_name| {
        let icon_path = format!("icons/{icon_name}-symbolic.svg");
        format!(
            "  <a href=\"{icon_path}\">
    <img src=\"{icon_path}\" width=\"32\" alt=\"{icon_name}\">
  </a>"
        )
    });

    let icons64_generator = Generator {
        path: ICONS64,
        start_seq: HTML_START_SEQ,
        end_seq: HTML_END_SEQ,
    };
    icons64_generator.generate_features(&icon_list, |icon_name| {
        let icon_path = format!("icons/{icon_name}-symbolic.svg");
        format!(
            "  <a href=\"{icon_path}\">
    <img src=\"{icon_path}\" width=\"64\" alt=\"{icon_name}\">
  </a>"
        )
    });
}
