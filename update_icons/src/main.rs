use std::path::PathBuf;

use crate::code_generator::Generator;

mod code_generator;
mod icon_list;

const TOML_START_SEQ: &str = "# AUTOGENERATED";
const TOML_END_SEQ: &str = "# END AUTOGENERATED";
const TOML_PATH: &str = "../Cargo.toml";

const RUST_START_SEQ: &str = "// AUTOGENERATED";
const RUST_END_SEQ: &str = "// END AUTOGENERATED";
const RUST_BUILD_PATH: &str = "../build.rs";
const RUST_LIB_PATH: &str = "../src/lib.rs";

const HTML_START_SEQ: &str = "<!-- AUTOGENERATED";
const HTML_END_SEQ: &str = "<!-- END AUTOGENERATED";
const ICONS16: &str = "../icons16.md";
const ICONS32: &str = "../icons32.md";
const ICONS64: &str = "../icons64.md";

pub struct IconInfo {
    pub name: String,
    pub path: PathBuf,
    pub source: String,
}

impl IconInfo {
    fn file_path(&self) -> String {
        format!(
            "icons/{}/{}",
            self.source,
            self.path.file_name().unwrap().to_str().unwrap()
        )
    }
}

fn main() {
    let icon_list = icon_list::get_icons(&["icon-development-kit", "fluentui-system-icons"]);

    let toml_generator = Generator {
        path: TOML_PATH,
        start_seq: TOML_START_SEQ,
        end_seq: TOML_END_SEQ,
    };
    toml_generator.generate_features(&icon_list, |icon| {
        [icon.name.as_str(), " = []"]
            .into_iter()
            .collect::<String>()
    });

    let build_rs_generator = Generator {
        path: RUST_BUILD_PATH,
        start_seq: RUST_START_SEQ,
        end_seq: RUST_END_SEQ,
    };

    build_rs_generator.generate_features(&icon_list, |icon| {
        let name = &icon.name;
        let source = &icon.source;
        let path = icon.file_path();
        format!("#[cfg(any(feature = \"{name}\", feature = \"{source}\"))]\n(\"{name}-symbolic.svg\", \"{path}\"),")
    });

    let lib_rs_generator = Generator {
        path: RUST_LIB_PATH,
        start_seq: RUST_START_SEQ,
        end_seq: RUST_END_SEQ,
    };
    lib_rs_generator.generate_features(&icon_list, |icon| {
        let IconInfo { name, source ,.. }= icon;
        let icon_path = icon.file_path();
        let const_name = name.to_uppercase().replace('-', "_");

        let alias = if name == &const_name {
            "".into()
        } else {
            format!("#[doc(alias = \"{name}\")]")
        };

        let cfg = format!("cfg(any(feature = \"{name}\", feature = \"{source}\"))");
        format!(
            "{alias}
#[cfg_attr(docsrs, doc({cfg}))]
#[{cfg}]
/// Icon name constant for the `{name}` icon.
///
/// Source: `{source}`
///
/// <img alt-name=\"Icon preview\" src=\"https://raw.githubusercontent.com/Relm4/icons/main/{icon_path}\" width=\"64\" style=\"color: #fff;background: #fff;border-radius: 5px;padding: 5px;\"/>
pub const {const_name}: &str = \"{name}\";"
        )
    });

    let icons16_generator = Generator {
        path: ICONS16,
        start_seq: HTML_START_SEQ,
        end_seq: HTML_END_SEQ,
    };
    icons16_generator.generate_features(&icon_list, |icon| {
        let name = &icon.name;
        let icon_path = icon.file_path();
        format!(
            "  <a href=\"{icon_path}\">
    <img src=\"{icon_path}\" width=\"16\" alt=\"{name}\">
  </a>"
        )
    });

    let icons32_generator = Generator {
        path: ICONS32,
        start_seq: HTML_START_SEQ,
        end_seq: HTML_END_SEQ,
    };
    icons32_generator.generate_features(&icon_list, |icon| {
        let name = &icon.name;
        let icon_path = icon.file_path();
        format!(
            "  <a href=\"{icon_path}\">
    <img src=\"{icon_path}\" width=\"32\" alt=\"{name}\">
  </a>"
        )
    });

    let icons64_generator = Generator {
        path: ICONS64,
        start_seq: HTML_START_SEQ,
        end_seq: HTML_END_SEQ,
    };
    icons64_generator.generate_features(&icon_list, |icon| {
        let name = &icon.name;
        let icon_path = icon.file_path();
        format!(
            "  <a href=\"{icon_path}\">
    <img src=\"{icon_path}\" width=\"64\" alt=\"{name}\">
  </a>"
        )
    });
}
